-- MySQL Script generated by MySQL Workbench
-- Mon Jun  3 11:11:25 2019
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema airline
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `airline` ;

-- -----------------------------------------------------
-- Schema airline
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `airline` DEFAULT CHARACTER SET utf8 ;
USE `airline` ;

-- -----------------------------------------------------
-- Table `airline`.`air_line`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `airline`.`air_line` (
  `idAirline` INT(11) NOT NULL,
  `Name` VARCHAR(90) NOT NULL,
  `Alias` VARCHAR(45) NULL DEFAULT NULL,
  `IATA` VARCHAR(45) NULL DEFAULT NULL,
  `ICAO` VARCHAR(45) NULL DEFAULT NULL,
  `Callsign` VARCHAR(200) NULL DEFAULT NULL,
  `Active` ENUM('Y', 'N') NULL DEFAULT NULL,
  PRIMARY KEY (`idAirline`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `airline`.`country`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `airline`.`country` (
  `idCountry` INT(11) NOT NULL AUTO_INCREMENT,
  `CountryName` VARCHAR(45) NULL DEFAULT NULL,
  `ISO2` VARCHAR(45) NULL DEFAULT NULL,
  `ISO3` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`idCountry`))
ENGINE = InnoDB
AUTO_INCREMENT = 332
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `airline`.`city`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `airline`.`city` (
  `idCity` INT(11) NOT NULL AUTO_INCREMENT,
  `CityName` VARCHAR(45) NULL DEFAULT NULL,
  `Country_idCountry` INT(11) NOT NULL,
  PRIMARY KEY (`idCity`),
  INDEX `fk_City_Country1_idx` (`Country_idCountry` ASC) VISIBLE,
  CONSTRAINT `fk_City_Country1`
    FOREIGN KEY (`Country_idCountry`)
    REFERENCES `airline`.`country` (`idCountry`))
ENGINE = InnoDB
AUTO_INCREMENT = 13465
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `airline`.`coordinates`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `airline`.`coordinates` (
  `idCoordinates` INT(11) NOT NULL AUTO_INCREMENT,
  `Latitude` DECIMAL(25,4) NULL DEFAULT NULL,
  `Longitude` DECIMAL(25,4) NULL DEFAULT NULL,
  `Altitude` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`idCoordinates`))
ENGINE = InnoDB
AUTO_INCREMENT = 7704
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `airline`.`timezone`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `airline`.`timezone` (
  `idTimezone` INT(11) NOT NULL AUTO_INCREMENT,
  `TimezoneName` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`idTimezone`))
ENGINE = InnoDB
AUTO_INCREMENT = 50
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `airline`.`airport`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `airline`.`airport` (
  `idAirport` INT(11) NOT NULL,
  `AirportName` VARCHAR(300) NOT NULL,
  `IATA` VARCHAR(45) NULL DEFAULT NULL,
  `ICAO` VARCHAR(45) NULL DEFAULT NULL,
  `City_idCity` INT(11) NOT NULL,
  `Coord_idCoord` INT(11) NOT NULL,
  `timezone_idTmz` INT(11) NOT NULL,
  PRIMARY KEY (`idAirport`),
  INDEX `fk_Airport_City1_idx` (`City_idCity` ASC) VISIBLE,
  INDEX `fk_Airport_Coordinates_idx` (`Coord_idCoord` ASC) VISIBLE,
  INDEX `fk_Airport_Timezone_idx` (`timezone_idTmz` ASC) VISIBLE,
  CONSTRAINT `fk_Airport_City`
    FOREIGN KEY (`City_idCity`)
    REFERENCES `airline`.`city` (`idCity`),
  CONSTRAINT `fk_Airport_Coordinates`
    FOREIGN KEY (`Coord_idCoord`)
    REFERENCES `airline`.`coordinates` (`idCoordinates`),
  CONSTRAINT `fk_Airport_Timezone`
    FOREIGN KEY (`timezone_idTmz`)
    REFERENCES `airline`.`timezone` (`idTimezone`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `airline`.`plane`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `airline`.`plane` (
  `idplane` INT(11) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(90) NULL DEFAULT NULL,
  `IATA` VARCHAR(45) NULL DEFAULT NULL,
  `ICAO` VARCHAR(45) NULL DEFAULT NULL,
  `Capacity` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`idplane`))
ENGINE = InnoDB
AUTO_INCREMENT = 252
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `airline`.`flight`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `airline`.`flight` (
  `idFlight` INT(11) NOT NULL AUTO_INCREMENT,
  `plane_idPlane` INT(11) NULL DEFAULT NULL,
  `airline_airID` INT(11) NULL DEFAULT NULL,
  `origin_idAirport` INT(11) NULL DEFAULT NULL,
  `dest_idAirport` INT(11) NULL DEFAULT NULL,
  `stops` TINYINT(4) NULL DEFAULT NULL,
  `date` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`idFlight`),
  INDEX `flight_plane_idx` (`plane_idPlane` ASC) VISIBLE,
  INDEX `flight_airline_idx` (`airline_airID` ASC) VISIBLE,
  INDEX `flight_airportOrigin_idx` (`origin_idAirport` ASC) VISIBLE,
  INDEX `flight_airportDest_idx` (`dest_idAirport` ASC) VISIBLE,
  CONSTRAINT `flight_airline`
    FOREIGN KEY (`airline_airID`)
    REFERENCES `airline`.`air_line` (`idAirline`),
  CONSTRAINT `flight_airportDest`
    FOREIGN KEY (`dest_idAirport`)
    REFERENCES `airline`.`airport` (`idAirport`),
  CONSTRAINT `flight_airportOrigin`
    FOREIGN KEY (`origin_idAirport`)
    REFERENCES `airline`.`airport` (`idAirport`),
  CONSTRAINT `flight_plane`
    FOREIGN KEY (`plane_idPlane`)
    REFERENCES `airline`.`plane` (`idplane`))
ENGINE = InnoDB
AUTO_INCREMENT = 12027
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `airline`.`passengers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `airline`.`passengers` (
  `idPassengers` INT(11) NOT NULL AUTO_INCREMENT,
  `first name` VARCHAR(45) NOT NULL,
  `last name` VARCHAR(45) NOT NULL,
  `email` VARCHAR(45) NOT NULL,
  `TravelId` INT(11) NOT NULL,
  `Telefono` INT(11) NOT NULL,
  `age` INT(11) NOT NULL,
  `country_countryId` INT(11) NOT NULL,
  PRIMARY KEY (`idPassengers`),
  INDEX `Passenger_country_idx` (`country_countryId` ASC) VISIBLE,
  CONSTRAINT `Passenger_country`
    FOREIGN KEY (`country_countryId`)
    REFERENCES `airline`.`country` (`idCountry`))
ENGINE = InnoDB
AUTO_INCREMENT = 607
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `airline`.`voucher`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `airline`.`voucher` (
  `idVoucher` VARCHAR(20) GENERATED ALWAYS AS (concat(`Flight_idFlight`,`Seat`)) STORED,
  `Class` ENUM('Tourist', 'Tourist premium', 'Executive', 'First class') NULL DEFAULT NULL,
  `Seat` VARCHAR(45) NOT NULL,
  `Passenger_idPassenger` INT(11) NOT NULL,
  `Flight_idFlight` INT(11) NOT NULL,
  PRIMARY KEY (`Seat`, `Flight_idFlight`, `idVoucher`),
  UNIQUE INDEX `idVoucher_UNIQUE` (`idVoucher` ASC) VISIBLE,
  INDEX `Voucher_flight_idx` (`Flight_idFlight` ASC) VISIBLE,
  INDEX `Voucher_Passenger_idx` (`Passenger_idPassenger` ASC) VISIBLE,
  CONSTRAINT `Voucher_Flight`
    FOREIGN KEY (`Flight_idFlight`)
    REFERENCES `airline`.`flight` (`idFlight`),
  CONSTRAINT `Voucher_Passenger`
    FOREIGN KEY (`Passenger_idPassenger`)
    REFERENCES `airline`.`passengers` (`idPassengers`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

USE `airline` ;

-- -----------------------------------------------------
-- Placeholder table for view `airline`.`avionesdisponibles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `airline`.`avionesdisponibles` (`idplane` INT);

-- -----------------------------------------------------
-- Placeholder table for view `airline`.`pasajerosporvuelo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `airline`.`pasajerosporvuelo` (`vuelo` INT, `pasajeros` INT);

-- -----------------------------------------------------
-- Placeholder table for view `airline`.`pasajerossinvuelo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `airline`.`pasajerossinvuelo` (`id Pasajeros` INT);

-- -----------------------------------------------------
-- Placeholder table for view `airline`.`vuelos vacios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `airline`.`vuelos vacios` (`idFlight` INT);

-- -----------------------------------------------------
-- Placeholder table for view `airline`.`vuelosllenos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `airline`.`vuelosllenos` (`idFlight` INT, `Capacity` INT);

-- -----------------------------------------------------
-- procedure addAirline
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `addAirline`(IN idAirline INT(11), 
IN AirlineName varchar(90),
IN Alias varchar(45),
IN IATA varchar(45),
IN ICAO varchar(45),
IN Callsign varchar(200),
IN Active enum('Y','N')
)
BEGIN
INSERT INTO `airline`.`air_line`
(`idAirline`,`Name`,`Alias`,`IATA`,`ICAO`,`Callsign`,`Active`)
VALUES(idAirline,AirlineName, Alias,IATA,ICAO,Callsign,Active);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure addAirport
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `addAirport`(
IN idAirport int(11),
IN AirportName varchar(300), 
IN IATA varchar(45),
IN ICAO varchar(45),
IN City_idCity int(11), 
IN Coord_idCoord int(11), 
IN timezone_idTmz int(11)
)
BEGIN
INSERT INTO `airline`.`airport`
(`idAirport`,`AirportName`,`IATA`,`ICAO`,`City_idCity`,`Coord_idCoord`,`timezone_idTmz`)
VALUES
(idAirport,AirportName,IATA,ICAO,City_idCity,Coord_idCoord,timezone_idTmz);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure addCity
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `addCity`(
IN CityName varchar(45) ,
IN Country_idCountry int(11)
)
BEGIN
INSERT INTO `airline`.`city`
(`CityName`,
`Country_idCountry`)
VALUES
(CityName,Country_idCountry );

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure addCoordinates
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `addCoordinates`(
IN Latitude decimal(25,4), 
IN Longitude decimal(25,4),
IN Altitude int(11)
)
BEGIN
INSERT INTO `airline`.`coordinates`
(`Latitude`,`Longitude`,`Altitude`)
VALUES
(Latitude,Longitude,Altitude);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure addCountry
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `addCountry`(
IN CountryName varchar(45),
IN ISO2 varchar(45),
IN ISO3 varchar(45)
)
BEGIN
INSERT INTO `airline`.`country`
(
`CountryName`,
`ISO2`,
`ISO3`)
VALUES
(
CountryName,
ISO2,
ISO3);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure addFlight
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `addFlight`(
IN plane_idPlane int(11) ,
IN airline_airID int(11) ,
IN origin_idAirport int(11), 
IN dest_idAirport int(11) ,
IN stops tinyint(4) ,
IN dateti datetime
)
BEGIN
INSERT INTO `airline`.`flight`
(`plane_idPlane`,
`airline_airID`,
`origin_idAirport`,
`dest_idAirport`,
`stops`,
`date`)
VALUES
(
plane_idPlane,
airline_airID ,
origin_idAirport, 
dest_idAirport,
stops,
dateti );

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure addPassenger
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `addPassenger`(
IN first_name varchar(45) ,
IN last_name varchar(45) ,
IN email varchar(45) ,
IN TravelId int(11) ,
IN Telefono int(11) ,
IN age int(11) ,
IN country_countryId int(11)
)
BEGIN
INSERT INTO `airline`.`passengers`
(
`first name`,
`last name`,
`email`,
`TravelId`,
`Telefono`,
`age`,
`country_countryId`)
VALUES
( first_name ,
last_name ,
email ,
TravelId ,
Telefono ,
age ,
country_countryId );

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure addPlane
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `addPlane`(
IN pname varchar(90), 
IN IATA varchar(45) ,
IN ICAO varchar(45) ,
IN Capacity int(11)
)
BEGIN
INSERT INTO `airline`.`plane`
(
`name`,
`IATA`,
`ICAO`,
`Capacity`)
VALUES
(pname , 
IATA  ,
ICAO  ,
Capacity );


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure addTimezone
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `addTimezone`(IN TimezoneName varchar(45))
BEGIN
INSERT INTO `airline`.`timezone`
(`TimezoneName`)
VALUES
(TimezoneName);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure addVoucher
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `addVoucher`(
IN Class enum('Tourist','Tourist premium','Executive','First class') ,
IN Seat varchar(45) ,
IN Passenger_idPassenger int(11), 
IN Flight_idFlight int(11)
)
BEGIN
INSERT INTO `airline`.`voucher`
(
`Class`,
`Seat`,
`Passenger_idPassenger`,
`Flight_idFlight`)
VALUES
(Class,
Seat ,
Passenger_idPassenger ,
Flight_idFlight);



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure build_email_list
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `build_email_list`(IN id int(11) ,INOUT email_list varchar(4000))
BEGIN
 DECLARE v_finished INTEGER DEFAULT 0;
        DECLARE v_email varchar(100) DEFAULT "";
 
 -- declare cursor for employee email
 DEClARE email_cursor CURSOR FOR 
 select email from passengers p
inner join voucher v on (p.idPassengers = v.Passenger_idPassenger)
inner join flight f on (f.idFlight = v.Flight_idFlight)
where f.idFlight = id;
 
 -- declare NOT FOUND handler
 DECLARE CONTINUE HANDLER 
        FOR NOT FOUND SET v_finished = 1;
 
 OPEN email_cursor;
 
 get_email: LOOP
 
 FETCH email_cursor INTO v_email;
 
 IF v_finished = 1 THEN 
 LEAVE get_email;
 END IF;
 
 -- build email list
 SET email_list = CONCAT(v_email,";",email_list);
 
 END LOOP get_email;
 
 CLOSE email_cursor;
 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteair_line
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteair_line`(IN id INT(11))
BEGIN

START TRANSACTION;
-- Provide the values of the primary key of the row to delete.
SET @idAirline_to_delete = id;
DELETE FROM air_line
    USING air_line
    WHERE air_line.idAirline = @idAirline_to_delete;
COMMIT;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteair_lineWithRef
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteair_lineWithRef`(IN id INT(11))
BEGIN

-- All objects that reference that row (directly or indirectly) will be deleted when this snippet is executed.
-- To preview the rows to be deleted, use Select Row Dependencies
START TRANSACTION;
-- Provide the values of the primary key of the row to delete.
SET @idAirline_to_delete = id;

DELETE FROM voucher
    USING flight, voucher, air_line
    WHERE `air_line`.`idAirline` = `flight`.`airline_airID`
          AND `flight`.`idFlight` = `voucher`.`Flight_idFlight`
          AND air_line.idAirline = @idAirline_to_delete;
DELETE FROM flight
    USING flight, air_line
    WHERE `air_line`.`idAirline` = `flight`.`airline_airID`
          AND air_line.idAirline = @idAirline_to_delete;
DELETE FROM air_line
    USING air_line
    WHERE air_line.idAirline = @idAirline_to_delete;
COMMIT;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteairport
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteairport`(IN id INT(11))
BEGIN

-- All objects that reference that row (directly or indirectly) will be deleted when this snippet is executed.
-- To preview the rows to be deleted, use Select Row Dependencies
START TRANSACTION;
-- Provide the values of the primary key of the row to delete.
SET @idAirport_to_delete = id;

DELETE FROM airport
    USING airport
    WHERE airport.idAirport = @idAirport_to_delete;
COMMIT;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteairportWithRef
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteairportWithRef`(IN id INT(11))
BEGIN

-- All objects that reference that row (directly or indirectly) will be deleted when this snippet is executed.
-- To preview the rows to be deleted, use Select Row Dependencies
START TRANSACTION;
-- Provide the values of the primary key of the row to delete.
SET @idAirport_to_delete = id;

DELETE FROM voucher
    USING flight, voucher, airport
    WHERE `airport`.`idAirport` = `flight`.`dest_idAirport`
          AND `flight`.`idFlight` = `voucher`.`Flight_idFlight`
          AND airport.idAirport = @idAirport_to_delete;
DELETE FROM voucher
    USING flight, voucher, airport
    WHERE `airport`.`idAirport` = `flight`.`origin_idAirport`
          AND `flight`.`idFlight` = `voucher`.`Flight_idFlight`
          AND airport.idAirport = @idAirport_to_delete;
       
DELETE FROM flight
    USING flight, airport
    WHERE `airport`.`idAirport` = `flight`.`dest_idAirport`
          AND airport.idAirport = @idAirport_to_delete;
DELETE FROM flight
    USING flight, airport
    WHERE `airport`.`idAirport` = `flight`.`origin_idAirport`
          AND airport.idAirport = @idAirport_to_delete;
DELETE FROM airport
    USING airport
    WHERE airport.idAirport = @idAirport_to_delete;
COMMIT;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deletecity
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deletecity`(IN id INT(11))
BEGIN

-- All objects that reference that row (directly or indirectly) will be deleted when this snippet is executed.
-- To preview the rows to be deleted, use Select Row Dependencies
START TRANSACTION;
-- Provide the values of the primary key of the row to delete.
SET @idCity_to_delete = id;

DELETE FROM city
    USING city
    WHERE city.idCity = @idCity_to_delete;
COMMIT;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deletecityWithRef
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deletecityWithRef`(IN id INT(11))
BEGIN

-- All objects that reference that row (directly or indirectly) will be deleted when this snippet is executed.
-- To preview the rows to be deleted, use Select Row Dependencies
START TRANSACTION;
-- Provide the values of the primary key of the row to delete.
SET @idCity_to_delete = id;
DELETE FROM Voucher
    USING flight, city, airport, voucher
		WHERE `airport`.`City_idCity` = `city`.`idCity`
        AND (`airport`.`idAirport` = `flight`.`dest_idAirport` OR `airport`.`idAirport` = `flight`.`origin_idAirport`)
        AND `voucher`.`Flight_idFlight` = `flight`.`idFlight`
        AND city.idCity = @idCity_to_delete;

DELETE FROM flight
    USING flight, city, airport
    WHERE `airport`.`City_idCity` = `city`.`idCity`
    AND (`airport`.`idAirport` = `flight`.`dest_idAirport` OR `airport`.`idAirport` = `flight`.`origin_idAirport`)
          AND city.idCity = @idCity_to_delete;
       
DELETE FROM Airport
    USING city, airport
    WHERE city.idCity = airport.City_idCity
         AND city.idCity = @idCity_to_delete;
DELETE FROM city
    USING city
    WHERE city.idCity = @idCity_to_delete;
COMMIT;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deletecoord
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deletecoord`(IN id INT(11))
BEGIN

-- All objects that reference that row (directly or indirectly) will be deleted when this snippet is executed.
-- To preview the rows to be deleted, use Select Row Dependencies
START TRANSACTION;
-- Provide the values of the primary key of the row to delete.
SET @idCoordinates_to_delete = id;

DELETE FROM coordinates
    USING coordinates
    WHERE coordinates.idCoordinates = @idCoordinates_to_delete;
COMMIT;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deletecoordinatesWithRef
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deletecoordinatesWithRef`(IN id INT(11))
BEGIN

-- All objects that reference that row (directly or indirectly) will be deleted when this snippet is executed.
-- To preview the rows to be deleted, use Select Row Dependencies
START TRANSACTION;
-- Provide the values of the primary key of the row to delete.
SET @idCoordinates_to_delete =id;

DELETE FROM Voucher
	USING coordinates, airport, flight, voucher
    WHERE coordinates.idCoordinates = airport.Coord_idCoord
    AND  (airport.idAirport = flight.origin_idAirport OR airport.idAirport =flight.dest_idAirport)
    AND  flight.idFlight = voucher.Flight_idFlight
    AND coordinates.idCoordinates = @idCoordinates_to_delete;

DELETE FROM flight
	USING coordinates, airport, flight
    WHERE coordinates.idCoordinates = airport.Coord_idCoord
    AND  (airport.idAirport = flight.origin_idAirport OR airport.idAirport =flight.dest_idAirport)
   AND coordinates.idCoordinates = @idCoordinates_to_delete;

DELETE FROM airport
	USING coordinates, airport
    WHERE coordinates.idCoordinates = airport.Coord_idCoord
    AND coordinates.idCoordinates = @idCoordinates_to_delete;

DELETE FROM coordinates
    USING coordinates
    WHERE coordinates.idCoordinates = @idCoordinates_to_delete;
COMMIT;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deletecountry
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deletecountry`(IN id INT(11))
BEGIN

-- All objects that reference that row (directly or indirectly) will be deleted when this snippet is executed.
-- To preview the rows to be deleted, use Select Row Dependencies
START TRANSACTION;
-- Provide the values of the primary key of the row to delete.
SET @idCountry_to_delete =id;
DELETE FROM country
    USING country
    WHERE country.idCountry = @idCountry_to_delete;
COMMIT;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deletecountryWithRef
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deletecountryWithRef`(IN id INT(11))
BEGIN

-- All objects that reference that row (directly or indirectly) will be deleted when this snippet is executed.
-- To preview the rows to be deleted, use Select Row Dependencies
START TRANSACTION;
-- Provide the values of the primary key of the row to delete.
SET @idCountry_to_delete = id;

DELETE FROM voucher
    USING passengers, voucher, country
    WHERE `country`.`idCountry` = `passengers`.`country_countryId`
          AND `passengers`.`idPassengers` = `voucher`.`Passenger_idPassenger`
          AND country.idCountry = @idCountry_to_delete;


-- ACÁ
DELETE FROM Voucher
    USING flight, city, airport, voucher , country
		WHERE  `city`.`Country_idCountry` =  `country`.`idCountry`
		AND `airport`.`City_idCity` = `city`.`idCity`
        AND (`airport`.`idAirport` = `flight`.`dest_idAirport` OR `airport`.`idAirport` = `flight`.`origin_idAirport`)
        AND `voucher`.`Flight_idFlight` = `flight`.`idFlight`
        AND country.idCountry = @idCountry_to_delete;

DELETE FROM passengers
    USING passengers, country
    WHERE `country`.`idCountry` = `passengers`.`country_countryId`
          AND country.idCountry = @idCountry_to_delete;
          
DELETE FROM flight
    USING flight, city, airport, country
	WHERE `city`.`Country_idCountry` =  `country`.`idCountry`
    AND `airport`.`City_idCity` = `city`.`idCity`
    AND (`airport`.`idAirport` = `flight`.`dest_idAirport` OR `airport`.`idAirport` = `flight`.`origin_idAirport`)
    AND country.idCountry = @idCountry_to_delete;
       
DELETE FROM Airport
    USING city, airport, country
    WHERE  `city`.`Country_idCountry` =  `country`.`idCountry`
    AND city.idCity = airport.City_idCity
    AND country.idCountry = @idCountry_to_delete;


-- END HERE
DELETE FROM city
	USING city , country
    WHERE `city`.`Country_idCountry` =  `country`.`idCountry`
    AND country.idCountry = @idCountry_to_delete;
    
DELETE FROM country
    USING country
    WHERE country.idCountry = @idCountry_to_delete;
COMMIT;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteflight
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteflight`(IN id INT(11))
BEGIN

START TRANSACTION;
-- All objects that reference that row (directly or indirectly) will be deleted when this snippet is executed.
-- To preview the rows to be deleted, use Select Row Dependencies

-- Provide the values of the primary key of the row to delete.
SET @idFlight_to_delete = id;

DELETE FROM flight
    USING flight
    WHERE flight.idFlight = @idFlight_to_delete;

COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteflightWithRef
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteflightWithRef`(IN id INT(11))
BEGIN

-- All objects that reference that row (directly or indirectly) will be deleted when this snippet is executed.
-- To preview the rows to be deleted, use Select Row Dependencies
START TRANSACTION;
-- Provide the values of the primary key of the row to delete.
SET @idFlight_to_delete = id;

DELETE FROM Voucher
    USING Voucher, flight
    WHERE `voucher`.`Flight_idFlight` = `flight`.`idFlight`
          AND voucher.Flight_idFlight = @idFlight_to_delete;
DELETE FROM flight
    USING flight
    WHERE flight.idFlight = @idFlight_to_delete;
COMMIT;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deletepassengers
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deletepassengers`(IN id INT(11))
BEGIN

-- All objects that reference that row (directly or indirectly) will be deleted when this snippet is executed.
-- To preview the rows to be deleted, use Select Row Dependencies
START TRANSACTION;
-- Provide the values of the primary key of the row to delete.
SET @idPassengers_to_delete = id;

DELETE FROM passengers
    USING passengers
    WHERE passengers.idPassengers = @idPassengers_to_delete;
COMMIT;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deletepassengersWithRef
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deletepassengersWithRef`(IN id INT(11))
BEGIN

-- All objects that reference that row (directly or indirectly) will be deleted when this snippet is executed.
-- To preview the rows to be deleted, use Select Row Dependencies
START TRANSACTION;
-- Provide the values of the primary key of the row to delete.
SET @idPassengers_to_delete = id;


DELETE FROM voucher
    USING passengers, voucher 
    WHERE passengers.idPassengers = voucher.Passenger_idPassenger
    AND passengers.idPassengers = @idPassengers_to_delete;
    
DELETE FROM passengers
    USING passengers
    WHERE passengers.idPassengers = @idPassengers_to_delete;
COMMIT;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteplane
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteplane`(IN id INT(11))
BEGIN
-- To preview the rows to be deleted, use Select Row Dependencies
START TRANSACTION;
-- Provide the values of the primary key of the row to delete.
SET @idplane_to_delete = id;

DELETE FROM plane
    USING plane
    WHERE plane.idplane = @idplane_to_delete;
COMMIT;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteplaneWithRef
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteplaneWithRef`(IN id INT(11))
BEGIN

-- All objects that reference that row (directly or indirectly) will be deleted when this snippet is executed.
-- To preview the rows to be deleted, use Select Row Dependencies
START TRANSACTION;
-- Provide the values of the primary key of the row to delete.
SET @idplane_to_delete = id;

DELETE FROM voucher
	USING plane, flight, voucher
    WHERE plane.idplane = flight.plane_idPlane
    AND flight.idFlight = voucher.Flight_idFlight
    AND plane.idplane = @idplane_to_delete;
    

DELETE FROM flight
	USING plane, flight
    WHERE plane.idplane = flight.plane_idPlane
    AND plane.idplane = @idplane_to_delete;
    
DELETE FROM plane
    USING plane
    WHERE plane.idplane = @idplane_to_delete;
COMMIT;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deletetimezone
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deletetimezone`(IN id INT(11))
BEGIN

-- All objects that reference that row (directly or indirectly) will be deleted when this snippet is executed.
-- To preview the rows to be deleted, use Select Row Dependencies
START TRANSACTION;
-- Provide the values of the primary key of the row to delete.
SET @idTimezone_to_delete = id;

DELETE FROM timezone
    USING timezone
    WHERE timezone.idTimezone = @idTimezone_to_delete;
COMMIT;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deletetimezoneWithRef
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deletetimezoneWithRef`(IN id INT(11))
BEGIN

-- All objects that reference that row (directly or indirectly) will be deleted when this snippet is executed.
-- To preview the rows to be deleted, use Select Row Dependencies
START TRANSACTION;
-- Provide the values of the primary key of the row to delete.
SET @idTimezone_to_delete =id;

DELETE FROM Voucher
	USING timezone, airport, flight, voucher
    WHERE timezone.idTimezone = airport.timezone_idTmz
    AND  (airport.idAirport = flight.origin_idAirport OR airport.idAirport =flight.dest_idAirport)
    AND  flight.idFlight = voucher.Flight_idFlight
    AND timezone.idTimezone =@idTimezone_to_delete;

DELETE FROM flight
	USING timezone, airport, flight
    WHERE timezone.idTimezone = airport.timezone_idTmz
    AND  (airport.idAirport = flight.origin_idAirport OR airport.idAirport =flight.dest_idAirport)
    AND timezone.idTimezone =@idTimezone_to_delete;

DELETE FROM airport
	USING timezone, airport
    WHERE timezone.idTimezone = airport.timezone_idTmz
    AND timezone.idTimezone =@idTimezone_to_delete;

DELETE FROM timezone
    USING timezone
    WHERE timezone.idTimezone = @idTimezone_to_delete;
COMMIT;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deletevoucher
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deletevoucher`(IN id VARCHAR(20) )
BEGIN
-- All objects that reference that row (directly or indirectly) will be deleted when this snippet is executed.
-- To preview the rows to be deleted, use Select Row Dependencies
START TRANSACTION;
-- Provide the values of the primary key of the row to delete.
SET @idVoucher_to_delete = id;

DELETE FROM voucher
    USING voucher
    WHERE  voucher.idVoucher = @idVoucher_to_delete ;

COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deletevoucherWithRef
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deletevoucherWithRef`(IN id VARCHAR(20))
BEGIN
-- All objects that reference that row (directly or indirectly) will be deleted when this snippet is executed.
-- To preview the rows to be deleted, use Select Row Dependencies
START TRANSACTION;
-- Provide the values of the primary key of the row to delete.

SET @idVoucher_to_delete = id;

DELETE FROM voucher
    USING voucher
    WHERE  voucher.idVoucher = @idVoucher_to_delete ;

COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure findPriority
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `findPriority`(IN id int(11) ,INOUT priority_list varchar(4000))
BEGIN
 DECLARE v_finished INTEGER DEFAULT 0;
        DECLARE v_idp varchar(100) DEFAULT "";
        DECLARE v_fnp varchar(100) DEFAULT "";
        DECLARE v_priority varchar(100) DEFAULT "";
    
 -- declare cursor for employee email
 DEClARE priority_cursor CURSOR FOR 
select p.idPassengers , p.`first name`,`airline`.`passengerPriority`( p.`age`,v.`Class`) 
from passengers p
inner join voucher v on (p.idPassengers = v.Passenger_idPassenger)
inner join flight f on (f.idFlight = v.Flight_idFlight)
where f.idFlight = id ;
 
 -- declare NOT FOUND handler
 DECLARE CONTINUE HANDLER 
        FOR NOT FOUND SET v_finished = 1;
 
 OPEN priority_cursor;
 get_priority: LOOP
 FETCH priority_cursor INTO v_idp, v_fnp , v_priority;
 IF v_finished = 1 THEN 
 LEAVE get_priority;
 END IF;
 
 -- build email list
 SET priority_list = CONCAT(v_idp,"/",v_fnp ,"/",v_priority ,";",priority_list);
 
 END LOOP get_priority;
 
 CLOSE priority_cursor;
 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure new_procedure
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `new_procedure`(IN id INT(11))
BEGIN

-- All objects that reference that row (directly or indirectly) will be deleted when this snippet is executed.
-- To preview the rows to be deleted, use Select Row Dependencies
START TRANSACTION;
-- Provide the values of the primary key of the row to delete.
SET @idPassengers_to_delete = id;

DELETE FROM voucher
    USING voucher, passengers
    WHERE `passengers`.`idPassengers` = `voucher`.`Passenger_idPassenger`
          AND passengers.idPassengers = @idPassengers_to_delete;
DELETE FROM passengers
    USING passengers
    WHERE passengers.idPassengers = @idPassengers_to_delete;
COMMIT;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- function passengerPriority
-- -----------------------------------------------------

DELIMITER $$
USE `airline`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `passengerPriority`(age int(11), Class varchar(20)) RETURNS varchar(20) CHARSET utf8
BEGIN

 IF age < 18 or age>70 or class = 'Executive'or 
 class = 'First class'THEN
 RETURN 'Alto';
 END IF;
IF class = 'Tourist premium'THEN
 RETURN 'Medio';
ELSE
RETURN 'BAJO';
END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `airline`.`avionesdisponibles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `airline`.`avionesdisponibles`;
USE `airline`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `airline`.`avionesdisponibles` AS select distinct `p`.`idplane` AS `idplane` from (`airline`.`plane` `p` left join `airline`.`flight` `f` on((`f`.`plane_idPlane` = `p`.`idplane`))) where isnull(`f`.`plane_idPlane`);

-- -----------------------------------------------------
-- View `airline`.`pasajerosporvuelo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `airline`.`pasajerosporvuelo`;
USE `airline`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `airline`.`pasajerosporvuelo` AS select `t`.`Flight_idFlight` AS `vuelo`,group_concat(concat(`t`.`first name`,' ',`t`.`last name`,';',`t`.`idPassengers`) separator ', ') AS `pasajeros` from (select `v`.`Flight_idFlight` AS `Flight_idFlight`,`p`.`first name` AS `first name`,`p`.`last name` AS `last name`,`p`.`idPassengers` AS `idPassengers` from (`airline`.`passengers` `p` left join `airline`.`voucher` `v` on((`v`.`Passenger_idPassenger` = `p`.`idPassengers`))) union select `v`.`Flight_idFlight` AS `Flight_idFlight`,`p`.`first name` AS `first name`,`p`.`last name` AS `last name`,`p`.`idPassengers` AS `idPassengers` from (`airline`.`voucher` `v` left join `airline`.`passengers` `p` on((`v`.`Passenger_idPassenger` = `p`.`idPassengers`)))) `t` group by `t`.`Flight_idFlight`;

-- -----------------------------------------------------
-- View `airline`.`pasajerossinvuelo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `airline`.`pasajerossinvuelo`;
USE `airline`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `airline`.`pasajerossinvuelo` AS select distinct `p`.`idPassengers` AS `id Pasajeros` from (`airline`.`passengers` `p` left join (`airline`.`flight` `f` join `airline`.`voucher` `v` on((`f`.`idFlight` = `v`.`Flight_idFlight`))) on((`p`.`idPassengers` = `v`.`Passenger_idPassenger`))) where isnull(`v`.`Passenger_idPassenger`);

-- -----------------------------------------------------
-- View `airline`.`vuelos vacios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `airline`.`vuelos vacios`;
USE `airline`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `airline`.`vuelos vacios` AS select distinct `f`.`idFlight` AS `idFlight` from (`airline`.`flight` `f` left join `airline`.`voucher` `v` on((`f`.`idFlight` = `v`.`Flight_idFlight`))) where isnull(`v`.`Flight_idFlight`);

-- -----------------------------------------------------
-- View `airline`.`vuelosllenos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `airline`.`vuelosllenos`;
USE `airline`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `airline`.`vuelosllenos` AS select `f`.`idFlight` AS `idFlight`,`p`.`Capacity` AS `Capacity` from (`airline`.`plane` `p` join `airline`.`flight` `f` on((`p`.`idplane` = `f`.`plane_idPlane`))) where (`p`.`Capacity` = (select count(`vo`.`idVoucher`) from (`airline`.`flight` `f1` join `airline`.`voucher` `vo` on((`f1`.`idFlight` = `vo`.`Flight_idFlight`))) where (`f1`.`idFlight` = `f`.`idFlight`)));
USE `airline`;

DELIMITER $$
USE `airline`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `airline`.`voucher_BEFORE_INSERT`
BEFORE INSERT ON `airline`.`voucher`
FOR EACH ROW
BEGIN
DECLARE id INT DEFAULT 0;
DECLARE cap INT DEFAULT 0;
DECLARE pasajeros INT DEFAULT 0;
SET id=NEW.Flight_idFlight;
select count(idVoucher)  from 
flight f inner join voucher vo on (f.idFlight = vo.Flight_idFlight)
where f.idFlight = id 
into pasajeros;

select pl.Capacity  from 
plane pl inner join flight f on (pl.idplane = f.plane_idPlane) 
where f.idFlight = id
into cap;
IF cap = pasajeros
  THEN
   SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT = 'Warning: this flight is at maximum capacity';
  END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
